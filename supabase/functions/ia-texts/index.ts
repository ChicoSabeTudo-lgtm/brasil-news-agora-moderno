import { serve } from 'https://deno.land/std@0.224.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3';

const ALLOWED_ORIGINS = [
  'https://chicosabetudo.sigametech.com.br',
  'http://localhost:5173',
  'http://localhost:8080',
];

const corsHeaders = (origin: string | null) => {
  const allowed = origin && ALLOWED_ORIGINS.includes(origin) ? origin : ALLOWED_ORIGINS[0];
  return {
    'Access-Control-Allow-Origin': allowed,
    'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Access-Control-Max-Age': '86400',
  };
};

const MIN_WORDS = 200;

const buildPrompt = (baseText: string) => `A partir do conte√∫do abaixo, gere resumos e t√≠tulos seguindo as diretrizes espec√≠ficas:

PARTE 1: SUGEST√ïES DE T√çTULOS
Crie 3 se√ß√µes de t√≠tulos, cada uma com 5 sugest√µes. Os t√≠tulos devem ser criativos, otimizados para cliques e refletir o conte√∫do da not√≠cia.
- Se√ß√£o 1: T√≠tulos Diretos e Informativos
- Se√ß√£o 2: T√≠tulos em Formato de Pergunta (Curiosidade)
- Se√ß√£o 3: T√≠tulos de Impacto (Para Redes Sociais)

PARTE 2: GERAR 3 RESUMOS DIFERENTES DO MESMO FATO

Regras gerais (aplicar √†s 3 op√ß√µes):
- Formato: narrativa cont√≠nua (sem bullet points)
- M√≠nimo de 200 palavras cada
- Tom humano: fluido, natural, sem jarg√µes de IA; evitar clich√™s e "rob√¥zices"
- Emojis: usar 2 a 5 emojis relevantes (üöî ü§ù üè• ‚úä üéâ üî• ‚ö° üí™ üëè üì¢) coerentes com o contexto, dentro do corpo do texto
- CTA final (linha pr√≥pria): "üëâ Leia mais em chicosabetudo.com.br üì≤"
- Hashtags (linha final): entre 6 e 12 hashtags relevantes ao tema (sem espa√ßos), incluindo #chicosabetudo por √∫ltimo
- Estilo Facebook-ready: texto direto para feed; sem cabe√ßalhos t√©cnicos, sem r√≥tulos desnecess√°rios, sem instru√ß√µes internas
- Aten√ß√£o ao tempo verbal: se evento encerrado ‚Üí usar passado (ex.: "autoridades confirmaram", "equipe venceu")

Tons exigidos (gerar 3 op√ß√µes):

Op√ß√£o 1 ‚Äî Foco na Not√≠cia (Informativo e Direto)
Objetivo: apresentar o fato com clareza e agilidade; destaque o que aconteceu, onde, quem, quando e qual o estado atual.
Evite adjetiva√ß√£o excessiva; priorize dados e confirma√ß√µes oficiais.

Op√ß√£o 2 ‚Äî Foco na An√°lise e Bastidores (Anal√≠tico/Reflexivo)
Objetivo: explorar contexto, causas, implica√ß√µes e pr√≥ximos passos; mencione hist√≥rico e cen√°rios poss√≠veis.
Traga interpreta√ß√£o respons√°vel (sem teorias infundadas), conectando pontos do texto base.

Op√ß√£o 3 ‚Äî Foco no Drama e Repercuss√£o (Impacto/Entretenimento)
Objetivo: linguagem mais emocional e envolvente, mantendo fidedignidade; valorize efeito humano e rea√ß√£o do p√∫blico.
Sem sensacionalismo barato; use ritmo narrativo para prender aten√ß√£o.

Estruture a resposta em JSON v√°lido com o formato:
{
  "titles_direct": string[];
  "titles_questions": string[];
  "titles_impact": string[];
  "posts": [
    { "tone": "informativo" | "analitico" | "impacto", "content": string }
  ]
}

TEXTO BASE:
"""
${baseText}
"""`;

async function getOpenAiKey() {
  const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
  const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
  
  const supabase = createClient(supabaseUrl, supabaseServiceKey);
  
  const { data, error } = await supabase
    .from('site_configurations')
    .select('openai_api_key')
    .limit(1)
    .maybeSingle();
  
  if (error) {
    console.error('Erro ao buscar OpenAI API Key:', error);
    throw new Error('Erro ao buscar configura√ß√£o da API Key.');
  }
  
  if (!data?.openai_api_key) {
    throw new Error('OPENAI_API_KEY n√£o configurada. Configure nas configura√ß√µes do site.');
  }
  
  return data.openai_api_key;
}

async function callOpenAi(prompt: string, apiKey: string) {
  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${apiKey}`,
    },
    body: JSON.stringify({
      model: 'gpt-4.1',
      messages: [
        {
          role: 'system',
          content:
            'Voc√™ √© um especialista em social media que gera conte√∫dos estruturados para redes sociais brasileiras.',
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.7,
      max_tokens: 1200,
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`OpenAI request failed: ${response.status} - ${errorText}`);
  }

  const json = await response.json();
  const completion = json.choices?.[0]?.message?.content as string | undefined;

  if (!completion) {
    throw new Error('OpenAI retornou resposta vazia.');
  }

  return completion;
}

serve(async (req) => {
  const origin = req.headers.get('origin');
  const headers = corsHeaders(origin);

  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers });
  }

  if (req.method !== 'POST') {
    return new Response(JSON.stringify({ error: 'M√©todo n√£o permitido' }), {
      status: 405,
      headers: { ...headers, 'Content-Type': 'application/json' },
    });
  }

  try {
    const { prompt, text } = await req.json();
    const baseText = typeof text === 'string' && text.trim().length > 0 ? text : prompt;

    if (!baseText || typeof baseText !== 'string' || baseText.trim().length === 0) {
      return new Response(JSON.stringify({ error: 'Texto base inv√°lido.' }), {
        status: 400,
        headers: { ...headers, 'Content-Type': 'application/json' },
      });
    }

    if (baseText.split(/\s+/).length < 50) {
      return new Response(JSON.stringify({ error: 'Forne√ßa um texto mais completo para a an√°lise.' }), {
        status: 400,
        headers: { ...headers, 'Content-Type': 'application/json' },
      });
    }

    // Buscar API Key do banco de dados
    const apiKey = await getOpenAiKey();
    const completion = await callOpenAi(buildPrompt(baseText), apiKey);

    return new Response(JSON.stringify({ completion }), {
      status: 200,
      headers: { ...headers, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Erro na fun√ß√£o ia-texts:', error);
    return new Response(JSON.stringify({ error: error.message || 'Erro interno.' }), {
      status: 500,
      headers: { ...headers, 'Content-Type': 'application/json' },
    });
  }
});

